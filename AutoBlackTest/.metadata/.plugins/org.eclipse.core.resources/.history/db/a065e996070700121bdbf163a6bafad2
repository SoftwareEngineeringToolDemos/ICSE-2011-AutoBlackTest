/**
 * jaolt - Java Auction Organisation, Listing Tool
 * Copyright (C) 2008-2011 Stefan Handschuh
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of the
 * License, or (at your option) any later version. 
 * 
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. 
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA
 *
 */

package de.shandschuh.jaolt.tools.log;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Date;

public class Logger {
//	public static final File ERROR_LOG = new File(System.getProperty("user.home")+File.separator+".jaolt"+ File.separator+"error.log");
//		
//	public static final File MESSAGE_LOG = new File(System.getProperty("user.home")+File.separator+".jaolt"+File.separator+"message.log");
	public static final File ERROR_LOG = new File("C:\\workspaceDist\\AutoBlackTest\\stdOut_Err\\errorJAOLT.log");
	
	public static final File MESSAGE_LOG = new File("C:\\workspaceDist\\AutoBlackTest\\stdOut_Err\\outputJAOLT.log");
	
	public static synchronized void log(Throwable exception) {
		try {
			PrintWriter writer = new PrintWriter(new FileWriter(ERROR_LOG, true));
			
			writer.println("=========================================");
			writer.println(new Date());
			writer.println(exception);
			
			StackTraceElement[] stackTraceElements = exception.getStackTrace();
			for (int n = 0, i = stackTraceElements.length; n < i; n++) {
				writer.println("     "+stackTraceElements[n]);
			}
			writer.println();
			writer.close();
		} catch (Exception e) {
			
		}
	}
	
	public static synchronized void log(String header, String text) {
		try {
			PrintWriter writer = new PrintWriter(new FileWriter(MESSAGE_LOG, true));
			
			writer.println("=========================================");
			writer.println(new Date());
			writer.println(header);
			String[] textArray = text.split("\n");
			
			for (int n = 0, i = textArray != null ? textArray.length : 0; n < i; n++) {
				writer.println("     "+textArray[n]);
			}
			writer.println();
			writer.close();
		} catch (Exception e) {
			log(e);
		}
	}
	
	public static String getErrorLogContent() {
		StringBuffer buffer = new StringBuffer();
		
		try {
			BufferedReader fileReader = new BufferedReader(new FileReader(ERROR_LOG));
			
			for (String line = fileReader.readLine(); line != null; line = fileReader.readLine()) {
				buffer.append(line+"\n");
			}
			fileReader.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return buffer.toString();
	}
}