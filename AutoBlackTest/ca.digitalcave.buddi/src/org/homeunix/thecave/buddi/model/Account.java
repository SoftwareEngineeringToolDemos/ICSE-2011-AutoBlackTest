/*
 * Created on Jul 30, 2007 by wyatt
 */
package org.homeunix.thecave.buddi.model;

import java.util.Date;

import org.homeunix.thecave.buddi.plugin.api.exception.InvalidValueException;

public interface Account extends Source{
	
	/**
	 * Get the account type
	 * @return
	 */
	public AccountType getAccountType();
	/**
	 * Returns the current balance.  This is a volatile value, and is 
	 * generated by calling updateBalance().
	 * @return
	 */
	public long getBalance();	
	/**
	 * Returns the balance as of the given date.
	 * @param d
	 * @return
	 */
	public long getBalance(Date d);
	/**
	 * Returns the starting date of this account.
	 * @return
	 */
	public Date getStartDate();
	/**
	 * Sets the starting date of this account. 
	 * @param startDate
	 */
	public void setStartDate(Date startDate);
	/**
	 * Returns the starting balance associated with this account.
	 * @return
	 */
	public long getStartingBalance();
	/**
	 * Sets the account type
	 * @param accountType
	 * @throws InvalidValueException
	 */
	public void setAccountType(AccountType accountType) throws InvalidValueException;
	/**
	 * Sets the starting balance
	 * @param startingBalance
	 * @throws InvalidValueException
	 */
	public void setStartingBalance(long startingBalance) throws InvalidValueException;
	/**
	 * Updates the balance for this account, by navigating all associated transactions.
	 * Calling this will also update the balanceTo or balanceFrom fields in 
	 * each transaction, representing the balance at the time of that transaction.
	 */
	public void updateBalance();
	
	/**
	 * Sets the overdraft limit for debit accounts, or the credit limit for credit accounts.
	 * @param overdraftLimit
	 */
	public void setOverdraftCreditLimit(long overdraftLimit) throws InvalidValueException;
	
	/**
	 * Returns the overdraft limit for Debit accounts, or Credit Limit for Credit accounts.  
	 * @return
	 */
	public long getOverdraftCreditLimit();
	
	/**
	 * Returns the interest rate.  The rate is given as a long, to three decimal places;
	 * for instance, 6123 would be 6.123%.  Zero means the rate has not been set (logical
	 * equivalent to null).
	 * @return
	 */
	public long getInterestRate();
	
	/**
	 * Sets the interest rate.  The rate is given as a long, to three decimal places;
	 * for instance, 6123 would be 6.123%.  Zero means the rate has not been set (logical
	 * equivalent to null).
	 * @param interestRate
	 */
	public void setInterestRate(long interestRate) throws InvalidValueException;
}
