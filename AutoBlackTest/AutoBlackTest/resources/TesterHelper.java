// DO NOT EDIT: This file is automatically generated.
//
// Only the associated template file should be edited directly.
// Helper class files are automatically regenerated from the template
// files at various times, including record actions and test object
// insertion actions.  Any changes made directly to a helper class
// file will be lost when automatically updated.

package resources;

import com.rational.test.ft.object.interfaces.*;
import com.rational.test.ft.object.interfaces.SAP.*;
import com.rational.test.ft.object.interfaces.WPF.*;
import com.rational.test.ft.object.interfaces.siebel.*;
import com.rational.test.ft.object.interfaces.flex.*;
import com.rational.test.ft.object.interfaces.dojo.*;
import com.rational.test.ft.script.*;
import com.rational.test.ft.vp.IFtVerificationPoint;

/**
 * Script Name   : <b>Tester</b><br>
 * Generated     : <b>2011/04/29 15:48:27</b><br>
 * Description   : Helper class for script<br>
 * Original Host : Windows 7 x86 6.1 build 7600 <br>
 * 
 * @since  aprile 29, 2011
 * @author lta
 */
public abstract class TesterHelper extends RationalTestScript
{
	/**
	 * Run: with default state.
	 *		toolTipText : Execute pdf merge
	 * 		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Run
	 * 		iconDescription : run.png
	 * 		.classIndex : 6
	 */
	protected GuiTestObject _run() 
	{
		return new GuiTestObject(
                        getMappedTestObject("_run"));
	}
	/**
	 * Run: with specific test context and state.
	 *		toolTipText : Execute pdf merge
	 * 		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Run
	 * 		iconDescription : run.png
	 * 		.classIndex : 6
	 */
	protected GuiTestObject _run(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("_run"), anchor, flags);
	}
	
	/**
	 * _Text: with default state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel :  
	 * 		.classIndex : 6
	 */
	protected TextGuiSubitemTestObject _Text() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("_Text"));
	}
	/**
	 * _Text: with specific test context and state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel :  
	 * 		.classIndex : 6
	 */
	protected TextGuiSubitemTestObject _Text(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("_Text"), anchor, flags);
	}
	
	/**
	 * Accetta: with default state.
	 *		.class : de.shandschuh.jaolt.gui.core.buttons.CustomJButton
	 * 		accessibleContext.accessibleName : Accetta
	 * 		.classIndex : 0
	 */
	protected GuiTestObject accetta() 
	{
		return new GuiTestObject(
                        getMappedTestObject("accetta"));
	}
	/**
	 * Accetta: with specific test context and state.
	 *		.class : de.shandschuh.jaolt.gui.core.buttons.CustomJButton
	 * 		accessibleContext.accessibleName : Accetta
	 * 		.classIndex : 0
	 */
	protected GuiTestObject accetta(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("accetta"), anchor, flags);
	}
	
	/**
	 * CategoryJTree: with default state.
	 *		.class : de.shandschuh.jaolt.gui.core.CategoryJTree
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject categoryJTree() 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("categoryJTree"));
	}
	/**
	 * CategoryJTree: with specific test context and state.
	 *		.class : de.shandschuh.jaolt.gui.core.CategoryJTree
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject categoryJTree(TestObject anchor, long flags) 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("categoryJTree"), anchor, flags);
	}
	
	/**
	 * Cerca: with default state.
	 *		.class : de.shandschuh.jaolt.gui.core.buttons.SearchCategoryJButton
	 * 		accessibleContext.accessibleName : Cerca
	 * 		.classIndex : 0
	 */
	protected GuiTestObject cerca() 
	{
		return new GuiTestObject(
                        getMappedTestObject("cerca"));
	}
	/**
	 * Cerca: with specific test context and state.
	 *		.class : de.shandschuh.jaolt.gui.core.buttons.SearchCategoryJButton
	 * 		accessibleContext.accessibleName : Cerca
	 * 		.classIndex : 0
	 */
	protected GuiTestObject cerca(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("cerca"), anchor, flags);
	}
	
	/**
	 * Chiudi: with default state.
	 *		.class : de.shandschuh.jaolt.gui.core.buttons.CloseJButton
	 * 		.priorLabel : Costi: 0,60 EUR
	 * 		accessibleContext.accessibleName : Chiudi
	 * 		.classIndex : 0
	 */
	protected GuiTestObject chiudi() 
	{
		return new GuiTestObject(
                        getMappedTestObject("chiudi"));
	}
	/**
	 * Chiudi: with specific test context and state.
	 *		.class : de.shandschuh.jaolt.gui.core.buttons.CloseJButton
	 * 		.priorLabel : Costi: 0,60 EUR
	 * 		accessibleContext.accessibleName : Chiudi
	 * 		.classIndex : 0
	 */
	protected GuiTestObject chiudi(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("chiudi"), anchor, flags);
	}
	
	/**
	 * eBayUSNuoviDatiStaticiDisponibili: with default state.
	 *		toolTipText : eBay US Nuovi Dati Statici Disponibili
	 * 		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : 
	 * 		iconDescription : 
	 * 		.classIndex : 1
	 */
	protected GuiTestObject eBayUSNuoviDatiStaticiDisponib() 
	{
		return new GuiTestObject(
                        getMappedTestObject("eBayUSNuoviDatiStaticiDisponib"));
	}
	/**
	 * eBayUSNuoviDatiStaticiDisponibili: with specific test context and state.
	 *		toolTipText : eBay US Nuovi Dati Statici Disponibili
	 * 		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : 
	 * 		iconDescription : 
	 * 		.classIndex : 1
	 */
	protected GuiTestObject eBayUSNuoviDatiStaticiDisponib(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("eBayUSNuoviDatiStaticiDisponib"), anchor, flags);
	}
	
	/**
	 * EditAuctionJDialog: with default state.
	 *		.captionText : Modifica Inserzione
	 * 		.class : de.shandschuh.jaolt.gui.EditAuctionJDialog
	 */
	protected TopLevelTestObject editAuctionJDialog() 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("editAuctionJDialog"));
	}
	/**
	 * EditAuctionJDialog: with specific test context and state.
	 *		.captionText : Modifica Inserzione
	 * 		.class : de.shandschuh.jaolt.gui.EditAuctionJDialog
	 */
	protected TopLevelTestObject editAuctionJDialog(TestObject anchor, long flags) 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("editAuctionJDialog"), anchor, flags);
	}
	
	/**
	 * EditDescriptionJDialog: with default state.
	 *		.captionText : Modifica Descrizione
	 * 		.class : de.shandschuh.jaolt.gui.editauction.EditDescriptionJDialog
	 */
	protected TopLevelTestObject editDescriptionJDialog() 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("editDescriptionJDialog"));
	}
	/**
	 * EditDescriptionJDialog: with specific test context and state.
	 *		.captionText : Modifica Descrizione
	 * 		.class : de.shandschuh.jaolt.gui.editauction.EditDescriptionJDialog
	 */
	protected TopLevelTestObject editDescriptionJDialog(TestObject anchor, long flags) 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("editDescriptionJDialog"), anchor, flags);
	}
	
	/**
	 * ganttprojectBatNotepad: with default state.
	 *		.text : ganttproject.bat - Notepad
	 * 		.class : Notepad
	 * 		.processName : NOTEPAD.EXE
	 * 		.name : ganttproject.bat - Notepad
	 */
	protected TopLevelSubitemTestObject ganttprojectBatNotepadwindow() 
	{
		return new TopLevelSubitemTestObject(
                        getMappedTestObject("ganttprojectBatNotepadwindow"));
	}
	/**
	 * ganttprojectBatNotepad: with specific test context and state.
	 *		.text : ganttproject.bat - Notepad
	 * 		.class : Notepad
	 * 		.processName : NOTEPAD.EXE
	 * 		.name : ganttproject.bat - Notepad
	 */
	protected TopLevelSubitemTestObject ganttprojectBatNotepadwindow(TestObject anchor, long flags) 
	{
		return new TopLevelSubitemTestObject(
                        getMappedTestObject("ganttprojectBatNotepadwindow"), anchor, flags);
	}
	
	/**
	 * GuiNotificationsJTable: with default state.
	 *		.class : de.shandschuh.jaolt.gui.core.GuiNotificationsJTable
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject guiNotificationsJTable() 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("guiNotificationsJTable"));
	}
	/**
	 * GuiNotificationsJTable: with specific test context and state.
	 *		.class : de.shandschuh.jaolt.gui.core.GuiNotificationsJTable
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject guiNotificationsJTable(TestObject anchor, long flags) 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("guiNotificationsJTable"), anchor, flags);
	}
	
	/**
	 * IHaveATwitterAccount: with default state.
	 *		text : I have a Twitter account
	 * 		.class : javax.swing.JRadioButton
	 * 		accessibleContext.accessibleName : I have a Twitter account
	 * 		name : radioAccountYes
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject iHaveATwitterAccount() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("iHaveATwitterAccount"));
	}
	/**
	 * IHaveATwitterAccount: with specific test context and state.
	 *		text : I have a Twitter account
	 * 		.class : javax.swing.JRadioButton
	 * 		accessibleContext.accessibleName : I have a Twitter account
	 * 		name : radioAccountYes
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject iHaveATwitterAccount(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("iHaveATwitterAccount"), anchor, flags);
	}
	
	/**
	 * JButton: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : 
	 * 		.classIndex : 1
	 */
	protected GuiTestObject jButton() 
	{
		return new GuiTestObject(
                        getMappedTestObject("jButton"));
	}
	/**
	 * JButton: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : 
	 * 		.classIndex : 1
	 */
	protected GuiTestObject jButton(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("jButton"), anchor, flags);
	}
	
	/**
	 * JMenuBar: with default state.
	 *		.class : javax.swing.JMenuBar
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject jMenuBar() 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("jMenuBar"));
	}
	/**
	 * JMenuBar: with specific test context and state.
	 *		.class : javax.swing.JMenuBar
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject jMenuBar(TestObject anchor, long flags) 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("jMenuBar"), anchor, flags);
	}
	
	/**
	 * JScrollPane: with default state.
	 *		.class : javax.swing.JScrollPane
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject jScrollPane() 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("jScrollPane"));
	}
	/**
	 * JScrollPane: with specific test context and state.
	 *		.class : javax.swing.JScrollPane
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject jScrollPane(TestObject anchor, long flags) 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("jScrollPane"), anchor, flags);
	}
	
	/**
	 * JSplitButton: with default state.
	 *		.itemCount : 2
	 * 		.itemText : {Invia Inserzione,Invia Tutte}
	 * 		.class : de.shandschuh.jaolt.gui.core.buttons.JSplitButton
	 * 		.classIndex : 1
	 */
	protected TextSelectGuiSubitemTestObject jSplitButton() 
	{
		return new TextSelectGuiSubitemTestObject(
                        getMappedTestObject("jSplitButton"));
	}
	/**
	 * JSplitButton: with specific test context and state.
	 *		.itemCount : 2
	 * 		.itemText : {Invia Inserzione,Invia Tutte}
	 * 		.class : de.shandschuh.jaolt.gui.core.buttons.JSplitButton
	 * 		.classIndex : 1
	 */
	protected TextSelectGuiSubitemTestObject jSplitButton(TestObject anchor, long flags) 
	{
		return new TextSelectGuiSubitemTestObject(
                        getMappedTestObject("jSplitButton"), anchor, flags);
	}
	
	/**
	 * Lister: with default state.
	 *		.captionText : jAOLT {dev}
	 * 		.class : de.shandschuh.jaolt.gui.Lister
	 * 		accessibleContext.accessibleName : jAOLT {dev}
	 */
	protected TopLevelTestObject lister() 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("lister"));
	}
	/**
	 * Lister: with specific test context and state.
	 *		.captionText : jAOLT {dev}
	 * 		.class : de.shandschuh.jaolt.gui.Lister
	 * 		accessibleContext.accessibleName : jAOLT {dev}
	 */
	protected TopLevelTestObject lister(TestObject anchor, long flags) 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("lister"), anchor, flags);
	}
	
	/**
	 * ListJTable: with default state.
	 *		.class : de.shandschuh.jaolt.gui.maintabbedpane.auctionlist.ListJTable
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject listJTable() 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("listJTable"));
	}
	/**
	 * ListJTable: with specific test context and state.
	 *		.class : de.shandschuh.jaolt.gui.maintabbedpane.auctionlist.ListJTable
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject listJTable(TestObject anchor, long flags) 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("listJTable"), anchor, flags);
	}
	
	/**
	 * login: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : login
	 * 		.classIndex : 0
	 */
	protected GuiTestObject login() 
	{
		return new GuiTestObject(
                        getMappedTestObject("login"));
	}
	/**
	 * login: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : login
	 * 		.classIndex : 0
	 */
	protected GuiTestObject login(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("login"), anchor, flags);
	}
	
	/**
	 * LogIn: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Log in
	 * 		name : btnLogin
	 * 		.classIndex : 1
	 */
	protected GuiTestObject logIn2() 
	{
		return new GuiTestObject(
                        getMappedTestObject("logIn2"));
	}
	/**
	 * LogIn: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Log in
	 * 		name : btnLogin
	 * 		.classIndex : 1
	 */
	protected GuiTestObject logIn2(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("logIn2"), anchor, flags);
	}
	
	/**
	 * loginWin: with default state.
	 *		.captionText : login
	 * 		.class : jtwitterclient.loginWin
	 * 		accessibleContext.accessibleName : login
	 */
	protected TopLevelTestObject loginWin() 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("loginWin"));
	}
	/**
	 * loginWin: with specific test context and state.
	 *		.captionText : login
	 * 		.class : jtwitterclient.loginWin
	 * 		accessibleContext.accessibleName : login
	 */
	protected TopLevelTestObject loginWin(TestObject anchor, long flags) 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("loginWin"), anchor, flags);
	}
	
	/**
	 * Modifica: with default state.
	 *		.class : de.shandschuh.jaolt.gui.core.buttons.ChangeJButton
	 * 		accessibleContext.accessibleName : Modifica
	 * 		.classIndex : 0
	 */
	protected GuiTestObject modifica() 
	{
		return new GuiTestObject(
                        getMappedTestObject("modifica"));
	}
	/**
	 * Modifica: with specific test context and state.
	 *		.class : de.shandschuh.jaolt.gui.core.buttons.ChangeJButton
	 * 		accessibleContext.accessibleName : Modifica
	 * 		.classIndex : 0
	 */
	protected GuiTestObject modifica(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("modifica"), anchor, flags);
	}
	
	/**
	 * Next: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Next
	 * 		name : btnNext
	 * 		.classIndex : 0
	 */
	protected GuiTestObject next() 
	{
		return new GuiTestObject(
                        getMappedTestObject("next"));
	}
	/**
	 * Next: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Next
	 * 		name : btnNext
	 * 		.classIndex : 0
	 */
	protected GuiTestObject next(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("next"), anchor, flags);
	}
	
	/**
	 * NuovaInserzione: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Nuova Inserzione
	 * 		iconDescription : add.png
	 * 		.classIndex : 0
	 */
	protected GuiTestObject nuovaInserzione() 
	{
		return new GuiTestObject(
                        getMappedTestObject("nuovaInserzione"));
	}
	/**
	 * NuovaInserzione: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Nuova Inserzione
	 * 		iconDescription : add.png
	 * 		.classIndex : 0
	 */
	protected GuiTestObject nuovaInserzione(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("nuovaInserzione"), anchor, flags);
	}
	
	/**
	 * OK: with default state.
	 *		.class : de.shandschuh.jaolt.gui.core.buttons.OkJButton
	 * 		accessibleContext.accessibleName : OK
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ok() 
	{
		return new GuiTestObject(
                        getMappedTestObject("ok"));
	}
	/**
	 * OK: with specific test context and state.
	 *		.class : de.shandschuh.jaolt.gui.core.buttons.OkJButton
	 * 		accessibleContext.accessibleName : OK
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ok(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("ok"), anchor, flags);
	}
	
	/**
	 * OK: with default state.
	 *		.class : javax.swing.plaf.basic.BasicOptionPaneUI$ButtonFactory$ConstrainedButton
	 * 		accessibleContext.accessibleName : OK
	 * 		name : OptionPane.button
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ok2() 
	{
		return new GuiTestObject(
                        getMappedTestObject("ok2"));
	}
	/**
	 * OK: with specific test context and state.
	 *		.class : javax.swing.plaf.basic.BasicOptionPaneUI$ButtonFactory$ConstrainedButton
	 * 		accessibleContext.accessibleName : OK
	 * 		name : OptionPane.button
	 * 		.classIndex : 0
	 */
	protected GuiTestObject ok2(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("ok2"), anchor, flags);
	}
	
	/**
	 * Password: with default state.
	 *		.class : javax.swing.JPasswordField
	 * 		.priorLabel : Password
	 * 		name : txtPassword
	 * 		.classIndex : 0
	 */
	protected TextGuiSubitemTestObject password() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("password"));
	}
	/**
	 * Password: with specific test context and state.
	 *		.class : javax.swing.JPasswordField
	 * 		.priorLabel : Password
	 * 		name : txtPassword
	 * 		.classIndex : 0
	 */
	protected TextGuiSubitemTestObject password(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("password"), anchor, flags);
	}
	
	/**
	 * PayPal: with default state.
	 *		text : PayPal
	 * 		.class : javax.swing.JCheckBox
	 * 		accessibleContext.accessibleName : PayPal
	 * 		.classIndex : 12
	 */
	protected ToggleGUITestObject payPal() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("payPal"));
	}
	/**
	 * PayPal: with specific test context and state.
	 *		text : PayPal
	 * 		.class : javax.swing.JCheckBox
	 * 		accessibleContext.accessibleName : PayPal
	 * 		.classIndex : 12
	 */
	protected ToggleGUITestObject payPal(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("payPal"), anchor, flags);
	}
	
	/**
	 * Salvare: with default state.
	 *		.class : de.shandschuh.jaolt.gui.core.buttons.SaveJButton
	 * 		accessibleContext.accessibleName : Salvare
	 * 		.classIndex : 0
	 */
	protected GuiTestObject salvare() 
	{
		return new GuiTestObject(
                        getMappedTestObject("salvare"));
	}
	/**
	 * Salvare: with specific test context and state.
	 *		.class : de.shandschuh.jaolt.gui.core.buttons.SaveJButton
	 * 		accessibleContext.accessibleName : Salvare
	 * 		.classIndex : 0
	 */
	protected GuiTestObject salvare(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("salvare"), anchor, flags);
	}
	
	/**
	 * Salvare: with default state.
	 *		.class : de.shandschuh.jaolt.gui.core.buttons.SaveJButton
	 * 		.priorLabel :  BUTTON_ADDTAG_TEXT 
	 * 		accessibleContext.accessibleName : Salvare
	 * 		.classIndex : 0
	 */
	protected GuiTestObject salvare2() 
	{
		return new GuiTestObject(
                        getMappedTestObject("salvare2"));
	}
	/**
	 * Salvare: with specific test context and state.
	 *		.class : de.shandschuh.jaolt.gui.core.buttons.SaveJButton
	 * 		.priorLabel :  BUTTON_ADDTAG_TEXT 
	 * 		accessibleContext.accessibleName : Salvare
	 * 		.classIndex : 0
	 */
	protected GuiTestObject salvare2(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("salvare2"), anchor, flags);
	}
	
	/**
	 * SamsungAnnunciaDueNuoviSmartphoneAPartireDaNovembreHardwareUpgradeIlSitoItalianoSullaTecnologiaWwwHw: with default state.
	 *		.text : Samsung annuncia due nuovi smartphone a partire da novembre - Hardware Upgrade - ...
	 * 		.class : MozillaUIWindowClass
	 * 		.processName : firefox.exe
	 * 		.name : Samsung annuncia due nuovi smartphone a partire da novembre - Hardware Upgrade - ...
	 */
	protected TopLevelSubitemTestObject samsungAnnunciaDueNuoviSmartph() 
	{
		return new TopLevelSubitemTestObject(
                        getMappedTestObject("samsungAnnunciaDueNuoviSmartph"));
	}
	/**
	 * SamsungAnnunciaDueNuoviSmartphoneAPartireDaNovembreHardwareUpgradeIlSitoItalianoSullaTecnologiaWwwHw: with specific test context and state.
	 *		.text : Samsung annuncia due nuovi smartphone a partire da novembre - Hardware Upgrade - ...
	 * 		.class : MozillaUIWindowClass
	 * 		.processName : firefox.exe
	 * 		.name : Samsung annuncia due nuovi smartphone a partire da novembre - Hardware Upgrade - ...
	 */
	protected TopLevelSubitemTestObject samsungAnnunciaDueNuoviSmartph(TestObject anchor, long flags) 
	{
		return new TopLevelSubitemTestObject(
                        getMappedTestObject("samsungAnnunciaDueNuoviSmartph"), anchor, flags);
	}
	
	/**
	 * SottotitoloText: with default state.
	 *		.class : de.shandschuh.jaolt.gui.core.CharacterCountJTextField
	 * 		.priorLabel : Sottotitolo
	 * 		.classIndex : 1
	 */
	protected TextGuiSubitemTestObject sottotitoloText() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("sottotitoloText"));
	}
	/**
	 * SottotitoloText: with specific test context and state.
	 *		.class : de.shandschuh.jaolt.gui.core.CharacterCountJTextField
	 * 		.priorLabel : Sottotitolo
	 * 		.classIndex : 1
	 */
	protected TextGuiSubitemTestObject sottotitoloText(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("sottotitoloText"), anchor, flags);
	}
	
	/**
	 * textHtml: with default state.
	 *		.class : javax.swing.JTextPane
	 * 		.classIndex : 0
	 */
	protected TextGuiSubitemTestObject textHtml() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("textHtml"));
	}
	/**
	 * textHtml: with specific test context and state.
	 *		.class : javax.swing.JTextPane
	 * 		.classIndex : 0
	 */
	protected TextGuiSubitemTestObject textHtml(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("textHtml"), anchor, flags);
	}
	
	/**
	 * textHtml: with default state.
	 *		.class : javax.swing.JEditorPane
	 * 		name : editorText
	 * 		.classIndex : 3
	 */
	protected TextGuiSubitemTestObject textHtml2() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("textHtml2"));
	}
	/**
	 * textHtml: with specific test context and state.
	 *		.class : javax.swing.JEditorPane
	 * 		name : editorText
	 * 		.classIndex : 3
	 */
	protected TextGuiSubitemTestObject textHtml2(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("textHtml2"), anchor, flags);
	}
	
	/**
	 * TimeSlotTrackerReleaseNoInfo: with default state.
	 *		.captionText : TimeSlotTracker (release no-info)
	 * 		.class : net.sf.timeslottracker.Starter
	 * 		accessibleContext.accessibleName : TimeSlotTracker (release no-info)
	 */
	protected TopLevelTestObject timeSlotTrackerReleaseNoInfo() 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("timeSlotTrackerReleaseNoInfo"));
	}
	/**
	 * TimeSlotTrackerReleaseNoInfo: with specific test context and state.
	 *		.captionText : TimeSlotTracker (release no-info)
	 * 		.class : net.sf.timeslottracker.Starter
	 * 		accessibleContext.accessibleName : TimeSlotTracker (release no-info)
	 */
	protected TopLevelTestObject timeSlotTrackerReleaseNoInfo(TestObject anchor, long flags) 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("timeSlotTrackerReleaseNoInfo"), anchor, flags);
	}
	
	/**
	 * TitoloText: with default state.
	 *		.class : de.shandschuh.jaolt.gui.core.CharacterCountJTextField
	 * 		.priorLabel : Titolo
	 * 		.classIndex : 0
	 */
	protected TextGuiSubitemTestObject titoloText() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("titoloText"));
	}
	/**
	 * TitoloText: with specific test context and state.
	 *		.class : de.shandschuh.jaolt.gui.core.CharacterCountJTextField
	 * 		.priorLabel : Titolo
	 * 		.classIndex : 0
	 */
	protected TextGuiSubitemTestObject titoloText(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("titoloText"), anchor, flags);
	}
	
	/**
	 * TwitthereLogin: with default state.
	 *		.captionText : Twitthere - Login
	 * 		.class : view.LoginWindow
	 * 		accessibleContext.accessibleName : Twitthere - Login
	 * 		name : LoginWindow
	 */
	protected TopLevelTestObject twitthereLogin() 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("twitthereLogin"));
	}
	/**
	 * TwitthereLogin: with specific test context and state.
	 *		.captionText : Twitthere - Login
	 * 		.class : view.LoginWindow
	 * 		accessibleContext.accessibleName : Twitthere - Login
	 * 		name : LoginWindow
	 */
	protected TopLevelTestObject twitthereLogin(TestObject anchor, long flags) 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("twitthereLogin"), anchor, flags);
	}
	
	/**
	 * txtUsername: with default state.
	 *		.class : javax.swing.JTextField
	 * 		name : txtUsername
	 * 		.classIndex : 0
	 */
	protected TextGuiSubitemTestObject txtUsername() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("txtUsername"));
	}
	/**
	 * txtUsername: with specific test context and state.
	 *		.class : javax.swing.JTextField
	 * 		name : txtUsername
	 * 		.classIndex : 0
	 */
	protected TextGuiSubitemTestObject txtUsername(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("txtUsername"), anchor, flags);
	}
	
	/**
	 * usernameText: with default state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : username
	 * 		.classIndex : 0
	 */
	protected TextGuiSubitemTestObject usernameText() 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("usernameText"));
	}
	/**
	 * usernameText: with specific test context and state.
	 *		.class : javax.swing.JTextField
	 * 		.priorLabel : username
	 * 		.classIndex : 0
	 */
	protected TextGuiSubitemTestObject usernameText(TestObject anchor, long flags) 
	{
		return new TextGuiSubitemTestObject(
                        getMappedTestObject("usernameText"), anchor, flags);
	}
	
	

	protected TesterHelper()
	{
		setScriptName("Tester");
	}
	
}

