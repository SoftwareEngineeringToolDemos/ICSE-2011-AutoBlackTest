// DO NOT EDIT: This file is automatically generated.
//
// Only the associated template file should be edited directly.
// Helper class files are automatically regenerated from the template
// files at various times, including record actions and test object
// insertion actions.  Any changes made directly to a helper class
// file will be lost when automatically updated.

package resources;

import com.rational.test.ft.object.interfaces.*;
import com.rational.test.ft.object.interfaces.SAP.*;
import com.rational.test.ft.object.interfaces.WPF.*;
import com.rational.test.ft.object.interfaces.siebel.*;
import com.rational.test.ft.object.interfaces.flex.*;
import com.rational.test.ft.object.interfaces.dojo.*;
import com.rational.test.ft.script.*;
import com.rational.test.ft.vp.IFtVerificationPoint;

/**
 * Script Name   : <b>TestCasesExecution</b><br>
 * Generated     : <b>2011/05/27 1:18:17 PM</b><br>
 * Description   : Helper class for script<br>
 * Original Host : Windows XP x86 5.1 build 2600 Service Pack 3 <br>
 * 
 * @since  May 27, 2011
 * @author lta
 */
public abstract class TestCasesExecutionHelper extends RationalTestScript
{
	/**
	 * Accetta: with default state.
	 *		.class : de.shandschuh.jaolt.gui.core.buttons.CustomJButton
	 * 		accessibleContext.accessibleName : Accetta
	 * 		.classIndex : 0
	 */
	protected GuiTestObject accetta() 
	{
		return new GuiTestObject(
                        getMappedTestObject("accetta"));
	}
	/**
	 * Accetta: with specific test context and state.
	 *		.class : de.shandschuh.jaolt.gui.core.buttons.CustomJButton
	 * 		accessibleContext.accessibleName : Accetta
	 * 		.classIndex : 0
	 */
	protected GuiTestObject accetta(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("accetta"), anchor, flags);
	}
	
	/**
	 * Annulla: with default state.
	 *		.class : de.shandschuh.jaolt.gui.core.buttons.CancelJButton
	 * 		accessibleContext.accessibleName : Annulla
	 * 		.classIndex : 0
	 */
	protected GuiTestObject annulla() 
	{
		return new GuiTestObject(
                        getMappedTestObject("annulla"));
	}
	/**
	 * Annulla: with specific test context and state.
	 *		.class : de.shandschuh.jaolt.gui.core.buttons.CancelJButton
	 * 		accessibleContext.accessibleName : Annulla
	 * 		.classIndex : 0
	 */
	protected GuiTestObject annulla(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("annulla"), anchor, flags);
	}
	
	/**
	 * htmlBrowser: with default state.
	 *		.class : Html.HtmlBrowser
	 * 		.browserName : MS Internet Explorer
	 */
	protected BrowserTestObject browser_htmlBrowser() 
	{
		return new BrowserTestObject(
                        getMappedTestObject("browser_htmlBrowser"));
	}
	/**
	 * htmlBrowser: with specific test context and state.
	 *		.class : Html.HtmlBrowser
	 * 		.browserName : MS Internet Explorer
	 */
	protected BrowserTestObject browser_htmlBrowser(TestObject anchor, long flags) 
	{
		return new BrowserTestObject(
                        getMappedTestObject("browser_htmlBrowser"), anchor, flags);
	}
	
	/**
	 * PlaybackLogForScript1: with default state.
	 *		.title : Playback Log for Script1
	 * 		.class : Html.HtmlDocument
	 * 		.url : file://C:\workspace\AutoBlackTest_logs\Script1\rational_ft_log.html
	 */
	protected DocumentTestObject document_playbackLogForScript1() 
	{
		return new DocumentTestObject(
                        getMappedTestObject("document_playbackLogForScript1"));
	}
	/**
	 * PlaybackLogForScript1: with specific test context and state.
	 *		.title : Playback Log for Script1
	 * 		.class : Html.HtmlDocument
	 * 		.url : file://C:\workspace\AutoBlackTest_logs\Script1\rational_ft_log.html
	 */
	protected DocumentTestObject document_playbackLogForScript1(TestObject anchor, long flags) 
	{
		return new DocumentTestObject(
                        getMappedTestObject("document_playbackLogForScript1"), anchor, flags);
	}
	
	/**
	 * JButton: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : ...
	 * 		.classIndex : 0
	 */
	protected GuiTestObject jButton() 
	{
		return new GuiTestObject(
                        getMappedTestObject("jButton"));
	}
	/**
	 * JButton: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : ...
	 * 		.classIndex : 0
	 */
	protected GuiTestObject jButton(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("jButton"), anchor, flags);
	}
	
	/**
	 * JScrollPane: with default state.
	 *		.class : javax.swing.JScrollPane
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject jScrollPane() 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("jScrollPane"));
	}
	/**
	 * JScrollPane: with specific test context and state.
	 *		.class : javax.swing.JScrollPane
	 * 		.classIndex : 0
	 */
	protected GuiSubitemTestObject jScrollPane(TestObject anchor, long flags) 
	{
		return new GuiSubitemTestObject(
                        getMappedTestObject("jScrollPane"), anchor, flags);
	}
	
	/**
	 * NuovaInserzione: with default state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Nuova Inserzione
	 * 		iconDescription : add.png
	 * 		.classIndex : 0
	 */
	protected GuiTestObject nuovaInserzione() 
	{
		return new GuiTestObject(
                        getMappedTestObject("nuovaInserzione"));
	}
	/**
	 * NuovaInserzione: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : Nuova Inserzione
	 * 		iconDescription : add.png
	 * 		.classIndex : 0
	 */
	protected GuiTestObject nuovaInserzione(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("nuovaInserzione"), anchor, flags);
	}
	
	/**
	 * Opzioni: with default state.
	 *		toolTipText : Opzioni
	 * 		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : 
	 * 		iconDescription : options.gif
	 * 		.classIndex : 5
	 */
	protected GuiTestObject opzioni() 
	{
		return new GuiTestObject(
                        getMappedTestObject("opzioni"));
	}
	/**
	 * Opzioni: with specific test context and state.
	 *		toolTipText : Opzioni
	 * 		.class : javax.swing.JButton
	 * 		accessibleContext.accessibleName : 
	 * 		iconDescription : options.gif
	 * 		.classIndex : 5
	 */
	protected GuiTestObject opzioni(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("opzioni"), anchor, flags);
	}
	
	/**
	 * PasswordMaster: with default state.
	 *		.captionText : Password Master...
	 * 		.class : javax.swing.JDialog
	 */
	protected TopLevelTestObject passwordMaster() 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("passwordMaster"));
	}
	/**
	 * PasswordMaster: with specific test context and state.
	 *		.captionText : Password Master...
	 * 		.class : javax.swing.JDialog
	 */
	protected TopLevelTestObject passwordMaster(TestObject anchor, long flags) 
	{
		return new TopLevelTestObject(
                        getMappedTestObject("passwordMaster"), anchor, flags);
	}
	
	/**
	 * RegistroRiproduzionePerScript1WindowsInternetExplorer: with default state.
	 *		.text : Registro riproduzione per Script1 - Windows Internet Explorer
	 * 		.class : IEFrame
	 * 		.processName : iexplore.exe
	 * 		.name : Registro riproduzione per Script1 - Windows Internet Explorer
	 */
	protected TopLevelSubitemTestObject registroRiproduzionePerScript1() 
	{
		return new TopLevelSubitemTestObject(
                        getMappedTestObject("registroRiproduzionePerScript1"));
	}
	/**
	 * RegistroRiproduzionePerScript1WindowsInternetExplorer: with specific test context and state.
	 *		.text : Registro riproduzione per Script1 - Windows Internet Explorer
	 * 		.class : IEFrame
	 * 		.processName : iexplore.exe
	 * 		.name : Registro riproduzione per Script1 - Windows Internet Explorer
	 */
	protected TopLevelSubitemTestObject registroRiproduzionePerScript1(TestObject anchor, long flags) 
	{
		return new TopLevelSubitemTestObject(
                        getMappedTestObject("registroRiproduzionePerScript1"), anchor, flags);
	}
	
	

	protected TestCasesExecutionHelper()
	{
		setScriptName("TestCasesExecution");
	}
	
}

